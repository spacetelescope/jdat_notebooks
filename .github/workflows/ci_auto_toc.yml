name: Automated Table of Contents

on:
  workflow_dispatch:
    inputs:
      notebook_name:
        description: 'The name of the notebook to add to the table of contents (e.g., example.ipynb)'
        required: true
        default: 'example.ipynb'

jobs:
  add_toc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Find notebook path
        id: find_path
        run: |
          NOTEBOOK_NAME="${{ github.event.inputs.notebook_name }}"
          NOTEBOOK_PATH=$(find ./notebooks -name "$NOTEBOOK_NAME" -type f)
          if [ -z "$NOTEBOOK_PATH" ]; then
            echo "::error::Notebook '${NOTEBOOK_NAME}' not found in the notebooks directory."
            exit 1
          fi
          SUBDIR=$(echo "$NOTEBOOK_PATH" | sed -E 's#^\.?/notebooks/([^/]+)/.*#\1#')

          if [ "$SUBDIR" = "cross_instrument" ]; then
            SUBDIR="Cross-Instrument"
          fi

          echo "notebook_path=$NOTEBOOK_PATH" >> $GITHUB_ENV
          echo "instrument=$SUBDIR" >> $GITHUB_ENV

      - name: Extract notebook title using jq
        id: get_title
        run: |
          TITLE=$(jq -r '
            .cells
            | map(select(.cell_type == "markdown"))
            | .[0:2][] 
            | .source[] 
            | select(test("^#")) 
            | match("^#+\\s*(.*)").captures[0].string
            ' "$notebook_path" | head -n 1)

          if [ -z "$TITLE" ]; then
            echo "::warning::No markdown title found in the first two markdown cells"
          fi

          echo "notebook_title=$TITLE" >> $GITHUB_ENV

      - name: Add notebook to _toc.yml if not already listed
        run: |
          NOTEBOOK_PATH="${{ env.notebook_path }}"
          NOTEBOOK_TITLE="${{ env.notebook_title }}"
          CAPTION="${{ env.instrument }}"
          TOC_FILE="_toc.yml"

          missing=0
          if [ -z "$NOTEBOOK_PATH" ]; then
            echo "::error::Missing NOTEBOOK_PATH"
            missing=1
          fi

          if [ -z "$NOTEBOOK_TITLE" ]; then
            echo "::error::Missing NOTEBOOK_TITLE"
            missing=1
            fi

          if [ -z "$CAPTION" ]; then
            echo "::error::Missing CAPTION"
            missing=1
          fi

          if [ "$missing" -eq 1 ]; then
            exit 1
          fi

          CLEAN_PATH="${NOTEBOOK_PATH#./}"
          CLEAN_TITLE=$(echo "$NOTEBOOK_TITLE" | sed 's/[[:space:]]*#*$//')

          # Skip if already present
          if grep -Fq "file: $CLEAN_PATH" "$TOC_FILE"; then
            echo "Notebook already listed in TOC."
            exit 0
          fi

          NEW_ENTRY=$(cat <<EOF
            - file: $CLEAN_PATH
              title: $CLEAN_TITLE
          EOF
          )

          awk -v cap="$CAPTION" -v newentry="$NEW_ENTRY" '
            BEGIN { found = 0 }
            {
              print $0
              if ($0 ~ "^[[:space:]]*-?[[:space:]]*caption:[[:space:]]*" cap "[[:space:]]*$") {
                found = 1
              } else if (found && $0 ~ "^[[:space:]]*chapters:[[:space:]]*$") {
                print newentry
                found = 0
              }
            }
            ' "$TOC_FILE" > toc_tmp && mv toc_tmp "$TOC_FILE"

          echo "Notebook added to _toc.yml"

      - name: Commit and push _toc.yml to main
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git add _toc.yml
          git commit -m "Update TOC with notebook: ${{ env.notebook_path }}" || echo "Nothing to commit"

          MAX_RETRIES=10
          RETRY_DELAY=10s
          success=false
          for i in $(seq 1 $MAX_RETRIES); do
            git pull origin main --rebase
            if git push origin main; then
              success=true
              break
            else
              echo "Push $i failed... waiting $RETRY_DELAY"
              sleep $RETRY_DELAY
            fi
          done

          if [ "$success" = false ]; then
            echo "Failed to push after $MAX_RETRIES attempts."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
